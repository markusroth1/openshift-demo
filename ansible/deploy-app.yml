---
- name: Logging in to Openshift
  hosts: localhost
  vars_files:
    - vars/vars.yml
  
  tasks:

    - name: Ensure an access token is retrieved for the admin user if no API token is defined in vars.yaml
      community.okd.openshift_auth:
        host: '{{ ocp4_api_url }}'
        username: "{{ ocp4_admin }}"
        password: "{{ ocp4_admin_pw }}"
        validate_certs: false
      register: auth_results
      when: ocp4_api_token is undefined or ocp4_api_token == ""

    - name: Set the API key from auth_results or predefined token
      set_fact:
        api_key: >-
          {{ auth_results.token
          if (auth_results is defined and 'token' in auth_results)
          else ocp4_api_token }}

- name: Deploy Application in OpenShift using Ansible K8s modules
  hosts: localhost
  gather_facts: false
  connection: local
  vars_files:
    - vars/vars.yml
  
  module_defaults:
    group/community.okd.okd:
      namespace: openshift-config
      api_key: "{{ api_key }}"
      host: '{{ ocp4_api_url }}'
    group/kubernetes.core.k8s:
      namespace: openshift-config
      api_key: "{{ api_key }}"
      host: '{{ ocp4_api_url }}'

  tasks:

    - name: Create OpenShift project (namespace)
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ project_name }}"
      when: ocp4_sandbox != true

# Database for the 3 tier Application
#
    - name: Deploy Database Application using Deployment
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            namespace: "{{ project_name }}"
            name: qod-db
            labels:
              app: qod-db
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: qod-db
            template:
              metadata:
                labels:
                  app: qod-db
              spec:
                containers:
                  - name: qod-db
                    image: "{{ image_repo }}/qod-db:1.1.0"
                    imagePullPolicy: Always
                    ports:
                      - name: mysql
                        containerPort: 3306
                        protocol: TCP
                    env:
                      - name: MYSQL_ROOT_PASSWORD
                        value: root

    - name: Expose the Database Application with a Service
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ project_name }}"
            name: qod-db
            labels:
              app: qod-db
              tier: data
          spec:
            type: ClusterIP
            ports:
              - name: mysql
                port: 3306
                targetPort: 3306
                protocol: TCP 
            selector:
              app: qod-db

 # API Microservice for the 3 tier Application
 #
    - name: Deploy API Application using Deployment
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          kind: Deployment
          apiVersion: apps/v1
          metadata:
            namespace: "{{ project_name }}"
            name: qod-api
            labels:
              app: qod-api
              tier: api
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: qod-api
            template:
              metadata:
                labels:
                  app: qod-api
              spec:
                containers:
                  - name: qod-api
                    image: "{{ image_repo }}/qod-api:1.1.0"
                    ports:
                      - name: http
                        containerPort: 8080
                        protocol: TCP
                    env:
                      - name: DB_HOST
                        value: qod-db
                      - name: DB_USER
                        value: user
                      - name: DB_PASS
                        value: pass
                    imagePullPolicy: Always
                restartPolicy: Always

    - name: Expose the API Application with a Service
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ project_name }}"
            name: qod-api
            labels:
              app: qod-api
              tier: api
          spec:
            type: ClusterIP
            ports:
              - port: 8080
                targetPort: 8080
                protocol: TCP
                name: http
            selector:
              app: qod-api

# Web Frontend for the 3 tier Application
#
    - name: Deploy Web-Frontend Application using Deployment
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            namespace: "{{ project_name }}"
            name: qod-web
            labels:
              app: qod-web
              tier: ui
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: qod-web
            template:
              metadata:
                labels:
                  app: qod-web
              spec:
                containers:
                  - name: qod-web
                    image: quay.io/markus_roth/openshift-demo/qod-web:1.1.0
                    imagePullPolicy: Always
                    ports:
                      - name: http
                        containerPort: 8080
                        protocol: TCP
                    env:
                      - name: QOD_API_URL
                        value: "http://qod-api:8080"

    - name: Expose the Web-Frontend Application with a Service
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            namespace: "{{ project_name }}"
            name: qod-web
            labels:
              app: qod-web
              tier: ui
          spec:
            type: ClusterIP
            ports:
              - port: 8080
                targetPort: 8080
                protocol: TCP
                name: http
            selector:
              app: qod-web
 
    - name: Expose the Frontend Application via a Route
      kubernetes.core.k8s:
        validate_certs: false
        state: present
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            namespace: "{{ project_name }}"
            name: qod
            namespace: markus-roth-dev
          spec:
            path: /
            to:
              kind: Service
              name: qod-web
            port:
              targetPort: http

# Show the route of the Web-Frontend
#
    - name: Verify the route and display URL
      kubernetes.core.k8s_info:
        validate_certs: false
        api_version: route.openshift.io/v1
        kind: Route
        name: qod
        namespace: "{{ project_name }}"
      register: route_info

    - name: Show application route
      ansible.builtin.debug:
        msg: "Application deployed at: http://{{ route_info.resources[0].spec.host }}"